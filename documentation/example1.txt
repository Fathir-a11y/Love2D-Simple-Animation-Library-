-- Importing the core Love2D modules (often implicit, but explicit here).

_G.love = require("love")

-- Import the animation library.

local Animation = require("animation")

-- The love.load() function is called once at the start of the game.

function love.load()
    -- Create a global table to hold all player properties.
    _G.player = {
        -- Initial horizontal and vertical position of the player.
        x = 500,
        y = 300,

        -- Constant: The force of gravity (pixels/second^2).
        gravity = 720,

        -- Constant: Player's horizontal movement speed (pixels/second).
        speed = 400,

        -- Constant: The upward force applied during a jump (negative value moves up).
        jump_force = -400,

        -- Variable: The player's current vertical speed (affected by gravity and jumps).
        velocity_y = 0,

        -- Object: Initialize the player's animation object.
        -- Parameters: imagePath, frameWidth (32), frameHeight (32), frameDuration (0.12s), doLoop(true by default)
        sprite = Animation.new("download.png", 32, 32, 0.12)
    }

    -- Set the window title for clarity
    love.window.setTitle("Simple Love2D Platformer")
end

-- The love.update(dt) function is called every frame for game logic and updates.
function love.update(dt)
    -- This is crucial: Update the custom animation object using delta time (dt).
    player.sprite:update(dt)

    -- HORIZONTAL MOVEMENT LOGIC
    if love.keyboard.isDown("right") then
        -- Move the player right, factoring in speed and elapsed time (dt).
        player.x = player.x + player.speed * dt
    elseif love.keyboard.isDown("left") then
        -- Move the player left.
        player.x = player.x - player.speed * dt
    end

    -- GRAVITY LOGIC
    -- Apply gravity force to the player's vertical velocity.
    player.velocity_y = player.velocity_y + player.gravity * dt
    -- Update the player's vertical position based on their new velocity.
    player.y = player.y + player.velocity_y * dt

    -- GROUND COLLISION AND JUMP LOGIC
    local groundLevel = 580 -- Define the ground height.

    -- Check if the player has hit or fallen below the ground level.
    if player.y >= groundLevel then
        -- Clamp the Y position to keep the player exactly on the floor.
        player.y = groundLevel
        -- Stop vertical movement (reset velocity_y).
        player.velocity_y = 0

        -- JUMPING LOGIC (Only allow jumping when grounded)
        if love.keyboard.isDown('space') then
            -- Apply the upward jump force to the vertical velocity.
            player.velocity_y = player.jump_force
        end
    end

    -- SCREEN CLAMPING LOGIC (Prevent player from leaving screen boundaries)
    local playerWidth = 32
    local screenWidth = love.graphics.getWidth()

    -- Clamp position X on the left side (x cannot be less than 0).
    if player.x < 0 then
        player.x = 0
    -- Clamp position X on the right side (x cannot go past the screen width minus player width).
    elseif player.x >= screenWidth - playerWidth then
        player.x = screenWidth - playerWidth
    end
end

-- The love.draw() function is called every frame to render game elements.
function love.draw()
    -- Set the background color (e.g., Magenta/Fuchsia for visibility).
    love.graphics.setBackgroundColor(1, 0, 1, 1)

    -- Draw the current frame of the player's animation at their calculated position.
    player.sprite:draw(player.x, player.y)
end
